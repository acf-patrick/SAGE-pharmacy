name: Build and deploy application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-22.04
    container: node:20
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: build frontend
        run: |
          cd frontend
          yarn install
          yarn build
      - name: regroup sources
        run: |
          mkdir backend/client
          mv frontend/dist/* backend/client
          rm -rf frontend
          mv backend app
          cd app
          rm -r test/ .gitignore README.md
      - name: build backend
        run: |
          cd app
          yarn install
          yarn build
      - name: create env file
        run: |
          cd app
          echo "PORT=${{ vars.PORT }}" >> docker.env
          echo "DATABASE_URL=postgres://${{ secrets.POSTGRES_USER }}:${{ secrets.POSTGRES_PASSWORD }}@${{ vars.HOST }}:5432/${{ secrets.POSTGRES_DB }}?schema=public&pool_timeout=0" >> docker.env
          echo "ACCESS_SECRET=${{ vars.ACCESS_SECRET }}" >> docker.env
          echo "REFRESH_SECRET=${{ vars.REFRESH_SECRET }}" >> docker.env
          echo "VITE_API_ENDPOINT=http://${{ vars.HOST }}/api" >> docker.env
          echo "MAILER_HOST=${{ vars.MAILER_HOST }}" >> docker.env
          echo "MAILER_USER=${{ vars.MAILER_USER }}" >> docker.env
          echo "MAILER_PASSWORD=${{ vars.MAILER_PASSWORD }}" >> docker.env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> docker.env
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> docker.env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> docker.env
      - name: create build artifact
        run: tar -czvf build.tar.gz app
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: build.tar.gz

  deploy:
    needs: build
    runs-on: self-hosted
    steps:
      - name: clear app directory
        run: |
          touch foo
          rm -r *
      - name: download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app
      - name: extract build from artifact
        run: |
          tar -xf build.tar.gz
          mv app/* .
          rm -r app build.tar.gz
      - name: run Docker image
        run: |
          sudo docker compose down
          sudo docker compose build
          sudo docker compose up -d
  
  migrate-database:
    needs: deploy
    runs-on: ubuntu-latest
    container: node:20
    steps:
      - name: download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app
      - name: extract build from artifact
        run: |
          tar -xf build.tar.gz
          mv app/* .
          rm -r app build.tar.gz
      - name: run migrations
        run: |
          cp docker.env .env
          yarn migrate_db

