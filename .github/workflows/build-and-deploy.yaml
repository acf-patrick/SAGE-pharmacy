name: Build and deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    container: node:20
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: build frontend
        run: |
          cd frontend
          yarn install
          yarn build
      - name: regroup sources
        run: |
          pwd
          mkdir backend/client
          mv frontend/dist/* backend/client
          rm -rf frontend
          cd backend
          mv backend app
          rm -r test/ .gitignore README.md
      - name: build backend
        run: |
          cd app
          yarn install
          yarn build
      - name: create env file
        run: |
          cd app
          touch docker.env
          echo PORT=${{ env.PORT }} >> docker.env
          echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> docker.env
          echo ACCESS_SECRET=${{ env.ACCESS_SECRET }} >> docker.env
          echo REFRESH_SECRET=${{ env.REFRESH_SECRET }} >> docker.env
          echo VITE_API_ENDPOINT=${{ env.VITE_API_ENDPOINT }} >> docker.env
          echo MAILER_HOST=${{ env.MAILER_HOST }} >> docker.env
          echo MAILER_USER=${{ env.MAILER_USER }} >> docker.env
          echo MAILER_PASSWORD=${{ env.MAILER_PASSWORD }} >> docker.env
      - name: create build artifact
        run: |
          tar -czvf build.tar.gz app
      - name: upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: app
          path: build.tar.gz

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: download build artifact
        uses: actions/download-artifact@v3
        with:
          name: app
      - name: show artifact content
        run: |
          tar -xvf build.tar.gz
          rm build.tar.gz
          ll app

      # - name: run Docker image
      #   run: |
      #     export POSTGRES_USER=${{ secrets.POSTGRES_USER }}
      #     export POSTGRES_DB=${{ secrets.POSTGRES_DB }}
      #     export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
      #     sudo docker compose down
      #     sudo docker compose pull
      #     sudo docker compose up -d
